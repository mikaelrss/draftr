type Query {
  players: [Player!]!
  fantasyFootballNerdRankings: [RankedPlayer!]!
  tiers(id: String!): [Tier!]!
  rank(id: String!): Rank
}

type Mutation {
  createDefaultRankings(userId: String!): String
  createPlayerList: String
  changeRank(
    rankUuid: String!
    playerId: String!
    destinationTier: Int!
    destinationRank: Int!
  ): Rank
  createTier: Tier!
  createTierAndMovePlayers(playerId: String!, originTier: Int!): [Tier!]!
}

type Rank {
  uuid: String!
  name: String
  tiers: [Tier!]!
}

enum PlayerPosition {
  RB
  WR
  QB
  TE
  K
  DEF
}

enum NFLTeam {
  ARI
  ATL
  BAL
  BUF
  CAR
  CHI
  CIN
  CLE
  DAL
  DEN
  DET
  GB
  HOU
  IND
  JAC
  KC
  LAC
  LAR
  MIA
  MIN
  NE
  NO
  NYG
  NYJ
  OAK
  PHI
  PIT
  SEA
  SF
  TB
  TEN
  WAS
}

type Tier {
  uuid: String!
  tierId: Int!
  players: [RankedPlayer!]!
}

type RankedPlayer {
  playerId: String!
  position: PlayerPosition!
  displayName: String!
  firstName: String
  lastName: String
  team: NFLTeam!
  byeWeek: Float
  standDev: Float
  nerdRank: Float
  positionRank: Float
  overallRank: Float!
}

type Player {
  playerId: String
  active: Boolean
  lastName: String
  firstName: String
  displayName: String
  team: String
  position: String
  height: String
  weight: String
  dateOfBirth: String
  college: String
  jersey: String
}
